Que el código Java se pueda compilar tanto para GWT como para Android. Por las pruebas que hice, HTML5 anda bastante bien pero se nota la diferencia con una solución nativa.

Esto tiene las siguientes implicancias:

- En Android se puede usar RoboGuice y en GWT, GIN. GIN no soporta el 100% de las cosas de Guice, por lo que tendremos que limitarnos.

- RoboGuice no soporta JSR330 (Guice 3), pero GIN sí. Habría que usar RoboGuice 2.0 (actualmente en beta).

- Javascript no soporta múltiples threads, por lo que todo lo que sea paralelo, se maneja por callbacks (requerimientos HTTP, persistencia, etc). Deberemos implementar todo con callbacks. En Android tal vez se pueda lanzar un toread separado.

- Abstraer el MVP de modo que los "presenters" y el bus de eventos sean independientes de la tecnología.
               |  MVP GWT        |  Android
-------------------------------------------------
Bus de eventos |  SimpleEventBus |  Intents
Presenters     |  Activities     |  Activities
Navegación     |  Places         |  Intents
Vistas         |  MGWT           |  Views (Android)

Algunas cosas inevitablemente se tendrán que configurar dos veces (por ejemplo, la asociación entre intent y actividad en Android se hace en el manifest, en GWT se hace mediante una clase "mapper").

- Abstraer la comunicación con el servidor. La implementación variará según el caso, pero una implementación por defecto podría ser:
               |  GWT            |  Android
-------------------------------------------------
JSON           |  AutoBeans      |  GSON

- En cuanto a la persistencia
               |  GWT                     |  Android
----------------------------------------------------------
DAO            |  GWT-Mobile persistence  |  ORMLite

- También se deberá abstraer el acceso a hardware. Se deberán crear wrappers para:
               |  GWT           |  Android
-------------------------------------------------------
Hardware       |  GWT-PhoneGap  |  API de Android

- Sería ideal que en Android los servicios se implementen como servicios Android. Y las pantallas, como actividades genéricas. De esta manera, Nibiru Mobile se instala una sola vez y todas las aplicaciones hacen uso de los servicios, tanto de negocio como de UI. Esto implica que la comunicación será entre procesos diferentes (los datos se deberán serializar, no se podrán pasar punteros a objetos).

Servicios generales a implementar. Se podrían crear implementaciones estándar contra Nibiru, para disponer de una versión genérica completamente funcional.
- Login
- Perfil (servicio y persistencia local)
- Sincronización automática de estado con el servidor (algo así como el StateHandler que armé para Vaadin o como las virtual tables de Leap)
- Push? mensajería asincrónica iniciada por el servidor?
- Mecanismo de licenciamiento, similar al de System, pero que firme algún identificador del teléfono. Habria que ver que mecanismos de encriptacion hay, no creo que PhoneGap tenga algo de eso.

Dudas
- 
